#!/bin/bash

source no-internet-env.sh

set -eo pipefail


SOURCE_DEPLOY_YML="../kubeflow-all-in-one.yml"
OUTPUT_DOWNLOAD_SCRIPT="download-images.sh"
OUTPUT_UPLOAD_SCRIPT="upload-images.sh"
TKG_CUSTOM_IMAGE_REPOSITORY=${TKG_CUSTOM_IMAGE_REPOSITORY:-''}
TKG_IMAGES_DOWNLOAD_FOLDER=${TKG_IMAGES_DOWNLOAD_FOLDER:-''}

if [ -z "$TKG_CUSTOM_IMAGE_REPOSITORY" ]; then
  echo "TKG_CUSTOM_IMAGE_REPOSITORY variable is required but is not defined" >&2
  exit 1
fi
if [ -z "$TKG_IMAGES_DOWNLOAD_FOLDER" ]; then
  echo "TKG_IMAGES_DOWNLOAD_FOLDER variable is required but is not defined" >&2
  exit 1
fi
mkdir -p $TKG_IMAGES_DOWNLOAD_FOLDER


if [ ! -f "$SOURCE_DEPLOY_YML" ]; then
    echo "- [WARN] no file exists $SOURCE_DEPLOY_YML"
    exit 1
fi

if [ -n "$TKG_CUSTOM_IMAGE_REPOSITORY_CA_CERTIFICATE" ]; then
  echo $TKG_CUSTOM_IMAGE_REPOSITORY_CA_CERTIFICATE > /tmp/cacrtbase64
  base64 -d /tmp/cacrtbase64 > ./cacrtbase64d.crt
  echo "generated ./cacrtbase64d.crt"
fi

adjust_image_url(){
  inputRepo=$1
  outputRepo=$inputRepo
  if [[ ! "$inputRepo" =~ "/"  ]]; then  
    outputRepo="docker.io/$outputRepo"
  fi
 # if [[ ! "$inputRepo" =~ ":"  ]]; then  
 #   outputRepo="$outputRepo:latest"
 # fi
  echo "$outputRepo"
}

parse_image_url(){
  inputRepo=$1
  actualImage=$(adjust_image_url $inputRepo)
  ## imagename  witout tag
  imageContext=$(echo ${actualImage} | cut -d"/" -f2- | cut -d":" -f1 | cut -d"@" -f1 )
  customImage=$TKG_CUSTOM_IMAGE_REPOSITORY/${imageContext} 
  echo "$COMMAND -i $actualImage --to-repo $customImage --registry-ca-cert-path /tmp/cacrtbase64d.crt" 
}
## COMMAND, OUTPUT_FILE
generate_script(){
  COMMAND=$1
  OUTPUT_FILE=$2
  OUTPUT_TMP="/tmp/${OUTPUT_FILE}.tmp"
  echo "#!/bin/bash" > $OUTPUT_FILE
  echo "export TKG_IMAGES_DOWNLOAD_FOLDER=$TKG_IMAGES_DOWNLOAD_FOLDER" >> $OUTPUT_TMP
  echo "source ./common-lib.sh" >> $OUTPUT_TMP

  ## image: abc.com/a:v1
  list=$(grep -r " image: " $SOURCE_DEPLOY_YML | grep -v "{{" | awk -F'image:' '{print $2}'| sed 's/[",\n]//g')
  for actualImage in ${list}; do
    parse_image_url "$actualImage" >> $OUTPUT_TMP
  done

  ## "image": "abc.com/a:v1"
  list=$(grep -r ' "image": ' $SOURCE_DEPLOY_YML | grep -v "{{" | awk -F'"image":' '{print $2}'| sed 's/[",\n]//g')
  for actualImage in ${list}; do
    parse_image_url "$actualImage" >> $OUTPUT_TMP
  done
  mv $OUTPUT_TMP $OUTPUT_FILE
  chmod +x $OUTPUT_FILE
  echo "generated $OUTPUT_FILE"
}

generate_script "download_image"  $OUTPUT_DOWNLOAD_SCRIPT
generate_script "upload_image"  $OUTPUT_UPLOAD_SCRIPT

